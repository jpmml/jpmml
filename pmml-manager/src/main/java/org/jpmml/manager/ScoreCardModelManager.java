package org.jpmml.manager;

import java.util.*;

import org.dmg.pmml.*;

/**
 * 
 * This class allows to handle the Scorecard model in a simpler way
 * than the scorecard class generated by the parser.
 *  
 * @author tbadie
 *
 */
public class ScoreCardModelManager extends ModelManager<Scorecard> {
	protected Scorecard scorecard = null;
	
	public ScoreCardModelManager(){
	}

	public ScoreCardModelManager(PMML pmml){
		this(pmml, find(pmml.getContent(), Scorecard.class));
	}

	public ScoreCardModelManager(PMML pmml, Scorecard scorecard){
		super(pmml);

		useReasonCodes = true;
		reasonCodeAlgorithm = ReasonCodeAlgorithm.POINTS_BELOW;
		this.scorecard = scorecard;
	}

	public String getSummary(){
		return "Scorecard";
	}

	@Override
	public Scorecard getModel(){
		ensureNotNull(this.scorecard);

		return this.scorecard;
	}

	public Scorecard createClassificationModel(){
		return createModel(MiningFunctionType.CLASSIFICATION);
	}

	/**
	 * @throws ModelManagerException If the Model already exists
	 *
	 * @see #getModel()
	 */
	public Scorecard createModel(MiningFunctionType miningFunction){
		ensureNull(scorecard);

		scorecard = new Scorecard(new MiningSchema(),
								new Characteristics(), miningFunction);

		List<Model> content = getPmml().getContent();
		content.add(scorecard);

		return scorecard;
	}

	/**
	 * The list of characteristic of the scorecard. Characteristic
	 *  includes the reason code, the list of attributes, the baseline score.
	 * 
	 * @return The characteristics.
	 */
	public Characteristics getCharacteristics() {
		ensureNotNull(scorecard);
		
		return scorecard.getCharacteristics();
	}
	
	/**
	 * Get a particular characteristic.
	 * 
	 * @param name The characteristic we want to get.
	 * @return The wanted characteristic, or null if there is no such 
	 * characteristic.
	 */
	public Characteristic getCharacteristic(String name) {
		ensureNotNull(scorecard);
		
		List<Characteristic> l = scorecard.getCharacteristics().getCharacteristics();
		for (Characteristic c : l) {
			if (c.getName().equals(name)) {
				return c;
			}
		}

		return null;
	}
	
	
	// Reason Code part of the manager.
	protected ReasonCodeAlgorithm reasonCodeAlgorithm;
	protected Boolean useReasonCodes;
	protected String lastReasonCode = null; 

	
	public String getLastReasonCode() {
		return lastReasonCode;
	}

	public boolean isUseReasonCodes() {
		return useReasonCodes;
	}

	public void setUseReasonCodes(boolean useReasonCodes) {
		this.useReasonCodes = useReasonCodes;
	}

	public ReasonCodeAlgorithm getReasonCodeAlgorithm() {
		return reasonCodeAlgorithm;
	}

	public void setReasonCodeAlgorithm(ReasonCodeAlgorithm reasonCodeAlgorithm) {
		this.reasonCodeAlgorithm = reasonCodeAlgorithm;
	}
	
	
	static protected enum ReasonCodeAlgorithm {
		POINTS_ABOVE (1, "pointsAbove"),
		POINTS_BELOW (2, "pointsBelow"),
		;
				
		private int id;
		private String label;
		
		private ReasonCodeAlgorithm(int id, String label) {
			this.id = id;
			this.label = label;
		}

		public int getId() {
			return id;
		}

		public String getLabel() {
			return label;
		}

		static public ReasonCodeAlgorithm fromLabel(String label) {
			ReasonCodeAlgorithm result = null;
			for (ReasonCodeAlgorithm opType : ReasonCodeAlgorithm.values()) {
				if (opType.label.equals(label)) {
					result = opType;
					break;
				}
			}
			return result;
		}

		static public ReasonCodeAlgorithm fromId(int id) {
			ReasonCodeAlgorithm result = null;
			for (ReasonCodeAlgorithm opType : ReasonCodeAlgorithm.values()) {
				if (opType.id==id) {
					result = opType;
					break;
				}
			}
			return result;
		}
	};
}